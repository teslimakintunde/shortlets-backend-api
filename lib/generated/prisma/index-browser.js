
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  avatar: 'avatar',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  adminPermissions: 'adminPermissions'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  phone: 'phone',
  bio: 'bio',
  country: 'country',
  state: 'state',
  city: 'city'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  price: 'price',
  images: 'images',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  zipCode: 'zipCode',
  bedroom: 'bedroom',
  bathroom: 'bathroom',
  latitude: 'latitude',
  longitude: 'longitude',
  type: 'type',
  property: 'property',
  isActive: 'isActive',
  isPaid: 'isPaid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownershipType: 'ownershipType',
  titleDeedStatus: 'titleDeedStatus',
  hoaFees: 'hoaFees',
  propertyTaxes: 'propertyTaxes',
  financingOptions: 'financingOptions',
  lotSize: 'lotSize',
  zoning: 'zoning',
  isAvailable: 'isAvailable',
  availableFrom: 'availableFrom',
  minStay: 'minStay',
  maxStay: 'maxStay',
  maxGuests: 'maxGuests',
  isNegotiable: 'isNegotiable',
  depositPercentage: 'depositPercentage',
  ownerId: 'ownerId'
};

exports.Prisma.PostDetailScalarFieldEnum = {
  id: 'id',
  description: 'description',
  utilities: 'utilities',
  income: 'income',
  school: 'school',
  bus: 'bus',
  restaurant: 'restaurant',
  wifi: 'wifi',
  airConditioning: 'airConditioning',
  parking: 'parking',
  securityPersonnel: 'securityPersonnel',
  pet: 'pet',
  size: 'size',
  floorNumber: 'floorNumber',
  totalFloors: 'totalFloors',
  yearBuilt: 'yearBuilt',
  furnished: 'furnished',
  airport: 'airport',
  supermarket: 'supermarket',
  shoppingMall: 'shoppingMall',
  nearestClub: 'nearestClub',
  hospital: 'hospital',
  beach: 'beach',
  publicTransport: 'publicTransport',
  restaurants: 'restaurants',
  additionalUtilities: 'additionalUtilities',
  postId: 'postId',
  renovationHistory: 'renovationHistory',
  energyEfficiency: 'energyEfficiency',
  homeWarranty: 'homeWarranty',
  includedAppliances: 'includedAppliances',
  hoaAmenities: 'hoaAmenities'
};

exports.Prisma.SavedPostScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  buyerId: 'buyerId',
  sellerId: 'sellerId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastReadBy: 'lastReadBy'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  senderId: 'senderId',
  content: 'content',
  isRead: 'isRead',
  createdAt: 'createdAt',
  seenBy: 'seenBy'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  description: 'description',
  metadata: 'metadata',
  transactionType: 'transactionType',
  userId: 'userId',
  postId: 'postId',
  cardId: 'cardId',
  bookingId: 'bookingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.PaymentCardScalarFieldEnum = {
  id: 'id',
  cardNumber: 'cardNumber',
  expiryMonth: 'expiryMonth',
  expiryYear: 'expiryYear',
  holderName: 'holderName',
  brand: 'brand',
  isDefault: 'isDefault',
  lastFour: 'lastFour',
  isActive: 'isActive',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  status: 'status',
  isVerified: 'isVerified',
  moderationReason: 'moderationReason',
  reviewerId: 'reviewerId',
  revieweeId: 'revieweeId',
  postId: 'postId',
  paymentId: 'paymentId',
  bookingId: 'bookingId',
  moderatedById: 'moderatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  approvedAt: 'approvedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  totalAmount: 'totalAmount',
  guests: 'guests',
  specialRequests: 'specialRequests',
  paymentId: 'paymentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cancelledAt: 'cancelledAt',
  confirmedAt: 'confirmedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  content: 'content',
  isRead: 'isRead',
  relatedId: 'relatedId',
  relatedType: 'relatedType',
  metadata: 'metadata',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.AdminActionLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  targetType: 'targetType',
  targetId: 'targetId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  user: 'user',
  admin: 'admin',
  support: 'support'
};

exports.Type = exports.$Enums.Type = {
  buy: 'buy',
  rent: 'rent'
};

exports.Property = exports.$Enums.Property = {
  apartment: 'apartment',
  villa: 'villa',
  duplex: 'duplex',
  penthouse: 'penthouse',
  townhouse: 'townhouse',
  bungalow: 'bungalow',
  loft: 'loft',
  studio: 'studio',
  chalet: 'chalet',
  cottage: 'cottage',
  mansion: 'mansion'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded',
  cancelled: 'cancelled'
};

exports.PaymentMethodType = exports.$Enums.PaymentMethodType = {
  credit_card: 'credit_card',
  debit_card: 'debit_card',
  bank_transfer: 'bank_transfer',
  digital_wallet: 'digital_wallet',
  cash: 'cash'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  sale: 'sale',
  rental: 'rental'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  pending_payment: 'pending_payment',
  confirmed: 'confirmed',
  active: 'active',
  completed: 'completed',
  cancelled: 'cancelled',
  rejected: 'rejected'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  message: 'message',
  payment: 'payment',
  review: 'review',
  system: 'system',
  admin: 'admin',
  booking: 'booking'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  Post: 'Post',
  PostDetail: 'PostDetail',
  SavedPost: 'SavedPost',
  Chat: 'Chat',
  Message: 'Message',
  Payment: 'Payment',
  PaymentCard: 'PaymentCard',
  Review: 'Review',
  Booking: 'Booking',
  Notification: 'Notification',
  AdminActionLog: 'AdminActionLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
