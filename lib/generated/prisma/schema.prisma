// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user // Default role
  admin // Full access
  support // Support staff access
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  villa
  duplex
  penthouse
  townhouse
  bungalow
  loft
  studio
  chalet
  cottage
  mansion
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
  cancelled
}

enum PaymentMethodType {
  credit_card
  debit_card
  bank_transfer
  digital_wallet
  cash
}

enum ReviewStatus {
  pending
  approved
  rejected
}

enum AdminPermission {
  manage_users
  manage_posts
  manage_reviews
  manage_payments
  manage_admins
  view_analytics
  manage_settings
}

enum NotificationType {
  message
  payment
  review
  system
  admin
  booking
}

enum TransactionType {
  sale
  rental
}

enum BookingStatus {
  pending_payment // Booking created but payment not completed
  confirmed // Payment successful, booking confirmed
  active // Booking is currently active
  completed // Booking period has ended
  cancelled // Booking was cancelled
  rejected // Booking was rejected by owner
}

// ============ MODELS ============

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  role      UserRole @default(user)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  listedPosts      Post[]           @relation("PostOwner")
  buyerChats       Chat[]           @relation("BuyerChats")
  sellerChats      Chat[]           @relation("SellerChats")
  messages         Message[]
  savedPosts       SavedPost[]
  userProfile      UserProfile?
  payments         Payment[]
  sentReviews      Review[]         @relation("SentReviews")
  receivedReviews  Review[]         @relation("ReceivedReviews")
  cards            PaymentCard[]
  notifications    Notification[]
  bookings         Booking[]        @relation("UserBookings")
  adminPermissions Json? // CHANGED: Use Json instead of AdminPermission[]
  moderatedReviews Review[]         @relation("ModeratedReviews")
  adminActions     AdminActionLog[]

  @@index([email])
  @@index([username])
  @@index([createdAt])
  @@index([isActive])
  @@index([role])
}

model UserProfile {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [userId], references: [id])
  userId  Int     @unique
  phone   String?
  bio     String?
  country String?
  state   String?
  city    String?

  @@index([country])
  @@index([state])
  @@index([city])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  price     Int
  images    Json
  address   String
  city      String
  state     String
  country   String?
  zipCode   String?
  bedroom   Int
  bathroom  Int
  latitude  Float?
  longitude Float?
  type      Type
  property  Property
  isActive  Boolean  @default(true)
  isPaid    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Sale-specific fields
  ownershipType    String?
  titleDeedStatus  String?
  hoaFees          Float?
  propertyTaxes    Float?
  financingOptions String?
  lotSize          Int?
  zoning           String?

  // Property availability and terms
  isAvailable       Boolean   @default(true)
  availableFrom     DateTime?
  minStay           Int?      @default(1)
  maxStay           Int?
  maxGuests         Int?
  isNegotiable      Boolean   @default(false)
  depositPercentage Float?

  // Relations
  owner      User        @relation("PostOwner", fields: [ownerId], references: [id])
  ownerId    Int
  postDetail PostDetail?
  savedPosts SavedPost[]
  chats      Chat[]
  payments   Payment[]
  reviews    Review[]
  bookings   Booking[]   @relation("PostBookings")

  @@index([ownerId])
  @@index([latitude, longitude])
  @@index([isPaid])
  @@index([isActive])
  @@index([country])
  @@index([state])
  @@index([city])
  @@index([zipCode])
  @@index([type])
  @@index([property])
  @@index([createdAt])
  @@index([isAvailable])
  @@index([availableFrom])
  @@index([maxGuests])
}

model PostDetail {
  id          Int     @id @default(autoincrement())
  description String? @db.Text

  // Add the missing fields from frontend
  utilities  String? @default("owner")
  income     String?
  school     Int? // Minutes to school
  bus        Int? // Minutes to bus
  restaurant Int? // Minutes to restaurant

  // Existing amenities & features
  wifi              Boolean @default(false)
  airConditioning   Boolean @default(false)
  parking           Boolean @default(false)
  securityPersonnel Boolean @default(false)

  // Pet Policy
  pet String?

  // Property Details
  size        Int? // Square footage/meters
  floorNumber Int?
  totalFloors Int?
  yearBuilt   Int?
  furnished   Boolean @default(false)

  // Nearby Facilities
  airport         Int? // Minutes to airport
  supermarket     Int? // Minutes to supermarket
  shoppingMall    Int? // Minutes to shopping mall
  nearestClub     Int? // Minutes to nearest club
  hospital        Int? // Minutes to hospital
  beach           Int? // Minutes to beach
  publicTransport Int? // Minutes to public transport
  restaurants     Int? // Minutes to restaurants

  // Additional utilities
  additionalUtilities String?

  // Relations
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @unique

  // Sale-specific fields
  renovationHistory  String?
  energyEfficiency   String?
  homeWarranty       Boolean? @default(false)
  includedAppliances String?
  hoaAmenities       String?

  // Indexes
  @@index([wifi])
  @@index([airConditioning])
  @@index([parking])
  @@index([furnished])
  @@index([size])
  @@index([homeWarranty])
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([createdAt])
}

model Chat {
  id         Int      @id @default(autoincrement())
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  buyer      User     @relation("BuyerChats", fields: [buyerId], references: [id])
  buyerId    Int
  seller     User     @relation("SellerChats", fields: [sellerId], references: [id])
  sellerId   Int
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastReadBy Json?

  // Relations
  messages Message[]

  @@unique([postId, buyerId, sellerId])
  @@index([postId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([updatedAt])
  @@index([isActive])
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  seenBy    Json?

  @@index([chatId])
  @@index([senderId])
  @@index([createdAt])
  @@index([isRead])
}

model Payment {
  id              Int               @id @default(autoincrement())
  amount          Float
  currency        String            @default("USD")
  status          PaymentStatus     @default(pending)
  paymentMethod   PaymentMethodType
  transactionId   String?           @unique
  description     String?
  metadata        Json?
  transactionType TransactionType?

  // Relations
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?        @relation(fields: [postId], references: [id])
  postId    Int?
  card      PaymentCard? @relation(fields: [cardId], references: [id])
  cardId    Int?
  booking   Booking?     @relation(fields: [bookingId], references: [id])
  bookingId Int?         @unique

  // Add relation to Review
  reviews Review[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  @@index([userId])
  @@index([postId])
  @@index([status])
  @@index([transactionId])
  @@index([createdAt])
  @@index([paymentMethod])
  @@index([transactionType])
}

model PaymentCard {
  id          Int     @id @default(autoincrement())
  cardNumber  String
  expiryMonth Int
  expiryYear  Int
  holderName  String
  brand       String?
  isDefault   Boolean @default(false)
  lastFour    String
  isActive    Boolean @default(true)

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lastFour, expiryMonth, expiryYear])
  @@index([userId])
  @@index([isActive])
}

model Review {
  id               Int          @id @default(autoincrement())
  rating           Int
  title            String?
  comment          String       @db.Text
  status           ReviewStatus @default(approved)
  isVerified       Boolean      @default(false)
  moderationReason String?

  // Relations
  reviewer      User     @relation("SentReviews", fields: [reviewerId], references: [id])
  reviewerId    Int
  reviewee      User     @relation("ReceivedReviews", fields: [revieweeId], references: [id])
  revieweeId    Int
  post          Post     @relation(fields: [postId], references: [id])
  postId        Int
  payment       Payment? @relation(fields: [paymentId], references: [id])
  paymentId     Int?     @unique
  booking       Booking? @relation(fields: [bookingId], references: [id])
  bookingId     Int?     @unique
  moderatedBy   User?    @relation("ModeratedReviews", fields: [moderatedById], references: [id])
  moderatedById Int?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approvedAt DateTime?

  @@unique([reviewerId, postId])
  @@index([reviewerId])
  @@index([revieweeId])
  @@index([postId])
  @@index([rating])
  @@index([status])
  @@index([createdAt])
  @@index([isVerified])
}

model Booking {
  id              Int           @id @default(autoincrement())
  post            Post          @relation("PostBookings", fields: [postId], references: [id])
  postId          Int
  user            User          @relation("UserBookings", fields: [userId], references: [id])
  userId          Int
  startDate       DateTime
  endDate         DateTime
  status          BookingStatus @default(pending_payment)
  totalAmount     Float
  guests          Int           @default(1)
  specialRequests String?

  // Relations - REMOVED @relation attribute from payment field
  payment   Payment? // Remove @relation attribute here
  paymentId Int?     @unique
  review    Review?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cancelledAt DateTime?
  confirmedAt DateTime?

  // Prevent overlapping bookings for the same rental property
  @@unique([postId, startDate, endDate])
  @@index([postId])
  @@index([userId])
  @@index([startDate, endDate])
  @@index([status])
}

model Notification {
  id          Int              @id @default(autoincrement())
  user        User             @relation(fields: [userId], references: [id])
  userId      Int
  type        NotificationType
  title       String
  content     String
  isRead      Boolean          @default(false)
  relatedId   Int? // ID of related entity
  relatedType String? // Type of related entity
  metadata    Json? // Additional data
  createdAt   DateTime         @default(now())
  expiresAt   DateTime? // Optional expiration

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
  @@index([expiresAt])
}

model AdminActionLog {
  id         Int      @id @default(autoincrement())
  admin      User     @relation(fields: [adminId], references: [id])
  adminId    Int
  action     String
  targetType String?
  targetId   Int?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([adminId])
  @@index([action])
  @@index([targetType, targetId])
  @@index([createdAt])
}
