
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  avatar: 'avatar',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  adminPermissions: 'adminPermissions'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  phone: 'phone',
  bio: 'bio',
  country: 'country',
  state: 'state',
  city: 'city'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  price: 'price',
  images: 'images',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  zipCode: 'zipCode',
  bedroom: 'bedroom',
  bathroom: 'bathroom',
  latitude: 'latitude',
  longitude: 'longitude',
  type: 'type',
  property: 'property',
  isActive: 'isActive',
  isPaid: 'isPaid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownershipType: 'ownershipType',
  titleDeedStatus: 'titleDeedStatus',
  hoaFees: 'hoaFees',
  propertyTaxes: 'propertyTaxes',
  financingOptions: 'financingOptions',
  lotSize: 'lotSize',
  zoning: 'zoning',
  isAvailable: 'isAvailable',
  availableFrom: 'availableFrom',
  minStay: 'minStay',
  maxStay: 'maxStay',
  maxGuests: 'maxGuests',
  isNegotiable: 'isNegotiable',
  depositPercentage: 'depositPercentage',
  ownerId: 'ownerId'
};

exports.Prisma.PostDetailScalarFieldEnum = {
  id: 'id',
  description: 'description',
  utilities: 'utilities',
  income: 'income',
  school: 'school',
  bus: 'bus',
  restaurant: 'restaurant',
  wifi: 'wifi',
  airConditioning: 'airConditioning',
  parking: 'parking',
  securityPersonnel: 'securityPersonnel',
  pet: 'pet',
  size: 'size',
  floorNumber: 'floorNumber',
  totalFloors: 'totalFloors',
  yearBuilt: 'yearBuilt',
  furnished: 'furnished',
  airport: 'airport',
  supermarket: 'supermarket',
  shoppingMall: 'shoppingMall',
  nearestClub: 'nearestClub',
  hospital: 'hospital',
  beach: 'beach',
  publicTransport: 'publicTransport',
  restaurants: 'restaurants',
  additionalUtilities: 'additionalUtilities',
  postId: 'postId',
  renovationHistory: 'renovationHistory',
  energyEfficiency: 'energyEfficiency',
  homeWarranty: 'homeWarranty',
  includedAppliances: 'includedAppliances',
  hoaAmenities: 'hoaAmenities'
};

exports.Prisma.SavedPostScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  buyerId: 'buyerId',
  sellerId: 'sellerId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastReadBy: 'lastReadBy'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  senderId: 'senderId',
  content: 'content',
  isRead: 'isRead',
  createdAt: 'createdAt',
  seenBy: 'seenBy'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  description: 'description',
  metadata: 'metadata',
  transactionType: 'transactionType',
  userId: 'userId',
  postId: 'postId',
  cardId: 'cardId',
  bookingId: 'bookingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.PaymentCardScalarFieldEnum = {
  id: 'id',
  cardNumber: 'cardNumber',
  expiryMonth: 'expiryMonth',
  expiryYear: 'expiryYear',
  holderName: 'holderName',
  brand: 'brand',
  isDefault: 'isDefault',
  lastFour: 'lastFour',
  isActive: 'isActive',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  status: 'status',
  isVerified: 'isVerified',
  moderationReason: 'moderationReason',
  reviewerId: 'reviewerId',
  revieweeId: 'revieweeId',
  postId: 'postId',
  paymentId: 'paymentId',
  bookingId: 'bookingId',
  moderatedById: 'moderatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  approvedAt: 'approvedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  totalAmount: 'totalAmount',
  guests: 'guests',
  specialRequests: 'specialRequests',
  paymentId: 'paymentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cancelledAt: 'cancelledAt',
  confirmedAt: 'confirmedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  content: 'content',
  isRead: 'isRead',
  relatedId: 'relatedId',
  relatedType: 'relatedType',
  metadata: 'metadata',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.AdminActionLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  targetType: 'targetType',
  targetId: 'targetId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  user: 'user',
  admin: 'admin',
  support: 'support'
};

exports.Type = exports.$Enums.Type = {
  buy: 'buy',
  rent: 'rent'
};

exports.Property = exports.$Enums.Property = {
  apartment: 'apartment',
  villa: 'villa',
  duplex: 'duplex',
  penthouse: 'penthouse',
  townhouse: 'townhouse',
  bungalow: 'bungalow',
  loft: 'loft',
  studio: 'studio',
  chalet: 'chalet',
  cottage: 'cottage',
  mansion: 'mansion'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded',
  cancelled: 'cancelled'
};

exports.PaymentMethodType = exports.$Enums.PaymentMethodType = {
  credit_card: 'credit_card',
  debit_card: 'debit_card',
  bank_transfer: 'bank_transfer',
  digital_wallet: 'digital_wallet',
  cash: 'cash'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.AdminPermission = exports.$Enums.AdminPermission = {
  manage_users: 'manage_users',
  manage_posts: 'manage_posts',
  manage_reviews: 'manage_reviews',
  manage_payments: 'manage_payments',
  manage_admins: 'manage_admins',
  view_analytics: 'view_analytics',
  manage_settings: 'manage_settings'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  message: 'message',
  payment: 'payment',
  review: 'review',
  system: 'system',
  admin: 'admin',
  booking: 'booking'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  sale: 'sale',
  rental: 'rental'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  pending_payment: 'pending_payment',
  confirmed: 'confirmed',
  active: 'active',
  completed: 'completed',
  cancelled: 'cancelled',
  rejected: 'rejected'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  Post: 'Post',
  PostDetail: 'PostDetail',
  SavedPost: 'SavedPost',
  Chat: 'Chat',
  Message: 'Message',
  Payment: 'Payment',
  PaymentCard: 'PaymentCard',
  Review: 'Review',
  Booking: 'Booking',
  Notification: 'Notification',
  AdminActionLog: 'AdminActionLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\PC\\Desktop\\NODE PROJECT\\REAL-ESTATE WITH REDUX TOOLKIT\\SHORTLET-API\\server\\lib\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\PC\\Desktop\\NODE PROJECT\\REAL-ESTATE WITH REDUX TOOLKIT\\SHORTLET-API\\server\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../lib/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum UserRole {\n  user // Default role\n  admin // Full access\n  support // Support staff access\n}\n\nenum Type {\n  buy\n  rent\n}\n\nenum Property {\n  apartment\n  villa\n  duplex\n  penthouse\n  townhouse\n  bungalow\n  loft\n  studio\n  chalet\n  cottage\n  mansion\n}\n\nenum PaymentStatus {\n  pending\n  completed\n  failed\n  refunded\n  cancelled\n}\n\nenum PaymentMethodType {\n  credit_card\n  debit_card\n  bank_transfer\n  digital_wallet\n  cash\n}\n\nenum ReviewStatus {\n  pending\n  approved\n  rejected\n}\n\nenum AdminPermission {\n  manage_users\n  manage_posts\n  manage_reviews\n  manage_payments\n  manage_admins\n  view_analytics\n  manage_settings\n}\n\nenum NotificationType {\n  message\n  payment\n  review\n  system\n  admin\n  booking\n}\n\nenum TransactionType {\n  sale\n  rental\n}\n\nenum BookingStatus {\n  pending_payment // Booking created but payment not completed\n  confirmed // Payment successful, booking confirmed\n  active // Booking is currently active\n  completed // Booking period has ended\n  cancelled // Booking was cancelled\n  rejected // Booking was rejected by owner\n}\n\n// ============ MODELS ============\n\nmodel User {\n  id        Int      @id @default(autoincrement())\n  email     String   @unique\n  username  String   @unique\n  password  String\n  avatar    String?\n  role      UserRole @default(user)\n  isActive  Boolean  @default(true)\n  createdAt DateTime @default(now())\n\n  // Relations\n  listedPosts      Post[]           @relation(\"PostOwner\")\n  buyerChats       Chat[]           @relation(\"BuyerChats\")\n  sellerChats      Chat[]           @relation(\"SellerChats\")\n  messages         Message[]\n  savedPosts       SavedPost[]\n  userProfile      UserProfile?\n  payments         Payment[]\n  sentReviews      Review[]         @relation(\"SentReviews\")\n  receivedReviews  Review[]         @relation(\"ReceivedReviews\")\n  cards            PaymentCard[]\n  notifications    Notification[]\n  bookings         Booking[]        @relation(\"UserBookings\")\n  adminPermissions Json? // CHANGED: Use Json instead of AdminPermission[]\n  moderatedReviews Review[]         @relation(\"ModeratedReviews\")\n  adminActions     AdminActionLog[]\n\n  @@index([email])\n  @@index([username])\n  @@index([createdAt])\n  @@index([isActive])\n  @@index([role])\n}\n\nmodel UserProfile {\n  id      Int     @id @default(autoincrement())\n  user    User    @relation(fields: [userId], references: [id])\n  userId  Int     @unique\n  phone   String?\n  bio     String?\n  country String?\n  state   String?\n  city    String?\n\n  @@index([country])\n  @@index([state])\n  @@index([city])\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String\n  price     Int\n  images    Json\n  address   String\n  city      String\n  state     String\n  country   String?\n  zipCode   String?\n  bedroom   Int\n  bathroom  Int\n  latitude  Float?\n  longitude Float?\n  type      Type\n  property  Property\n  isActive  Boolean  @default(true)\n  isPaid    Boolean  @default(false)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Sale-specific fields\n  ownershipType    String?\n  titleDeedStatus  String?\n  hoaFees          Float?\n  propertyTaxes    Float?\n  financingOptions String?\n  lotSize          Int?\n  zoning           String?\n\n  // Property availability and terms\n  isAvailable       Boolean   @default(true)\n  availableFrom     DateTime?\n  minStay           Int?      @default(1)\n  maxStay           Int?\n  maxGuests         Int?\n  isNegotiable      Boolean   @default(false)\n  depositPercentage Float?\n\n  // Relations\n  owner      User        @relation(\"PostOwner\", fields: [ownerId], references: [id])\n  ownerId    Int\n  postDetail PostDetail?\n  savedPosts SavedPost[]\n  chats      Chat[]\n  payments   Payment[]\n  reviews    Review[]\n  bookings   Booking[]   @relation(\"PostBookings\")\n\n  @@index([ownerId])\n  @@index([latitude, longitude])\n  @@index([isPaid])\n  @@index([isActive])\n  @@index([country])\n  @@index([state])\n  @@index([city])\n  @@index([zipCode])\n  @@index([type])\n  @@index([property])\n  @@index([createdAt])\n  @@index([isAvailable])\n  @@index([availableFrom])\n  @@index([maxGuests])\n}\n\nmodel PostDetail {\n  id          Int     @id @default(autoincrement())\n  description String? @db.Text\n\n  // Add the missing fields from frontend\n  utilities  String? @default(\"owner\")\n  income     String?\n  school     Int? // Minutes to school\n  bus        Int? // Minutes to bus\n  restaurant Int? // Minutes to restaurant\n\n  // Existing amenities & features\n  wifi              Boolean @default(false)\n  airConditioning   Boolean @default(false)\n  parking           Boolean @default(false)\n  securityPersonnel Boolean @default(false)\n\n  // Pet Policy\n  pet String?\n\n  // Property Details\n  size        Int? // Square footage/meters\n  floorNumber Int?\n  totalFloors Int?\n  yearBuilt   Int?\n  furnished   Boolean @default(false)\n\n  // Nearby Facilities\n  airport         Int? // Minutes to airport\n  supermarket     Int? // Minutes to supermarket\n  shoppingMall    Int? // Minutes to shopping mall\n  nearestClub     Int? // Minutes to nearest club\n  hospital        Int? // Minutes to hospital\n  beach           Int? // Minutes to beach\n  publicTransport Int? // Minutes to public transport\n  restaurants     Int? // Minutes to restaurants\n\n  // Additional utilities\n  additionalUtilities String?\n\n  // Relations\n  post   Post @relation(fields: [postId], references: [id])\n  postId Int  @unique\n\n  // Sale-specific fields\n  renovationHistory  String?\n  energyEfficiency   String?\n  homeWarranty       Boolean? @default(false)\n  includedAppliances String?\n  hoaAmenities       String?\n\n  // Indexes\n  @@index([wifi])\n  @@index([airConditioning])\n  @@index([parking])\n  @@index([furnished])\n  @@index([size])\n  @@index([homeWarranty])\n}\n\nmodel SavedPost {\n  id        Int      @id @default(autoincrement())\n  user      User     @relation(fields: [userId], references: [id])\n  post      Post     @relation(fields: [postId], references: [id])\n  userId    Int\n  postId    Int\n  createdAt DateTime @default(now())\n\n  @@unique([userId, postId])\n  @@index([userId])\n  @@index([postId])\n  @@index([createdAt])\n}\n\nmodel Chat {\n  id         Int      @id @default(autoincrement())\n  post       Post     @relation(fields: [postId], references: [id])\n  postId     Int\n  buyer      User     @relation(\"BuyerChats\", fields: [buyerId], references: [id])\n  buyerId    Int\n  seller     User     @relation(\"SellerChats\", fields: [sellerId], references: [id])\n  sellerId   Int\n  isActive   Boolean  @default(true)\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n  lastReadBy Json?\n\n  // Relations\n  messages Message[]\n\n  @@unique([postId, buyerId, sellerId])\n  @@index([postId])\n  @@index([buyerId])\n  @@index([sellerId])\n  @@index([updatedAt])\n  @@index([isActive])\n}\n\nmodel Message {\n  id        Int      @id @default(autoincrement())\n  chat      Chat     @relation(fields: [chatId], references: [id])\n  chatId    Int\n  sender    User     @relation(fields: [senderId], references: [id])\n  senderId  Int\n  content   String\n  isRead    Boolean  @default(false)\n  createdAt DateTime @default(now())\n  seenBy    Json?\n\n  @@index([chatId])\n  @@index([senderId])\n  @@index([createdAt])\n  @@index([isRead])\n}\n\nmodel Payment {\n  id              Int               @id @default(autoincrement())\n  amount          Float\n  currency        String            @default(\"USD\")\n  status          PaymentStatus     @default(pending)\n  paymentMethod   PaymentMethodType\n  transactionId   String?           @unique\n  description     String?\n  metadata        Json?\n  transactionType TransactionType?\n\n  // Relations\n  user      User         @relation(fields: [userId], references: [id])\n  userId    Int\n  post      Post?        @relation(fields: [postId], references: [id])\n  postId    Int?\n  card      PaymentCard? @relation(fields: [cardId], references: [id])\n  cardId    Int?\n  booking   Booking?     @relation(fields: [bookingId], references: [id])\n  bookingId Int?         @unique\n\n  // Add relation to Review\n  reviews Review[]\n\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  completedAt DateTime?\n\n  @@index([userId])\n  @@index([postId])\n  @@index([status])\n  @@index([transactionId])\n  @@index([createdAt])\n  @@index([paymentMethod])\n  @@index([transactionType])\n}\n\nmodel PaymentCard {\n  id          Int     @id @default(autoincrement())\n  cardNumber  String\n  expiryMonth Int\n  expiryYear  Int\n  holderName  String\n  brand       String?\n  isDefault   Boolean @default(false)\n  lastFour    String\n  isActive    Boolean @default(true)\n\n  // Relations\n  user     User      @relation(fields: [userId], references: [id])\n  userId   Int\n  payments Payment[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([userId, lastFour, expiryMonth, expiryYear])\n  @@index([userId])\n  @@index([isActive])\n}\n\nmodel Review {\n  id               Int          @id @default(autoincrement())\n  rating           Int\n  title            String?\n  comment          String       @db.Text\n  status           ReviewStatus @default(approved)\n  isVerified       Boolean      @default(false)\n  moderationReason String?\n\n  // Relations\n  reviewer      User     @relation(\"SentReviews\", fields: [reviewerId], references: [id])\n  reviewerId    Int\n  reviewee      User     @relation(\"ReceivedReviews\", fields: [revieweeId], references: [id])\n  revieweeId    Int\n  post          Post     @relation(fields: [postId], references: [id])\n  postId        Int\n  payment       Payment? @relation(fields: [paymentId], references: [id])\n  paymentId     Int?     @unique\n  booking       Booking? @relation(fields: [bookingId], references: [id])\n  bookingId     Int?     @unique\n  moderatedBy   User?    @relation(\"ModeratedReviews\", fields: [moderatedById], references: [id])\n  moderatedById Int?\n\n  createdAt  DateTime  @default(now())\n  updatedAt  DateTime  @updatedAt\n  approvedAt DateTime?\n\n  @@unique([reviewerId, postId])\n  @@index([reviewerId])\n  @@index([revieweeId])\n  @@index([postId])\n  @@index([rating])\n  @@index([status])\n  @@index([createdAt])\n  @@index([isVerified])\n}\n\nmodel Booking {\n  id              Int           @id @default(autoincrement())\n  post            Post          @relation(\"PostBookings\", fields: [postId], references: [id])\n  postId          Int\n  user            User          @relation(\"UserBookings\", fields: [userId], references: [id])\n  userId          Int\n  startDate       DateTime\n  endDate         DateTime\n  status          BookingStatus @default(pending_payment)\n  totalAmount     Float\n  guests          Int           @default(1)\n  specialRequests String?\n\n  // Relations - REMOVED @relation attribute from payment field\n  payment   Payment? // Remove @relation attribute here\n  paymentId Int?     @unique\n  review    Review?\n\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  cancelledAt DateTime?\n  confirmedAt DateTime?\n\n  // Prevent overlapping bookings for the same rental property\n  @@unique([postId, startDate, endDate])\n  @@index([postId])\n  @@index([userId])\n  @@index([startDate, endDate])\n  @@index([status])\n}\n\nmodel Notification {\n  id          Int              @id @default(autoincrement())\n  user        User             @relation(fields: [userId], references: [id])\n  userId      Int\n  type        NotificationType\n  title       String\n  content     String\n  isRead      Boolean          @default(false)\n  relatedId   Int? // ID of related entity\n  relatedType String? // Type of related entity\n  metadata    Json? // Additional data\n  createdAt   DateTime         @default(now())\n  expiresAt   DateTime? // Optional expiration\n\n  @@index([userId])\n  @@index([isRead])\n  @@index([type])\n  @@index([createdAt])\n  @@index([expiresAt])\n}\n\nmodel AdminActionLog {\n  id         Int      @id @default(autoincrement())\n  admin      User     @relation(fields: [adminId], references: [id])\n  adminId    Int\n  action     String\n  targetType String?\n  targetId   Int?\n  details    Json?\n  ipAddress  String?\n  userAgent  String?\n  createdAt  DateTime @default(now())\n\n  @@index([adminId])\n  @@index([action])\n  @@index([targetType, targetId])\n  @@index([createdAt])\n}\n",
  "inlineSchemaHash": "8a190bb73f0746847316f79ba4b233f4ae94c7d7ba25a2a18b5fec04a21e74d9",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"listedPosts\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostOwner\"},{\"name\":\"buyerChats\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"BuyerChats\"},{\"name\":\"sellerChats\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"SellerChats\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageToUser\"},{\"name\":\"savedPosts\",\"kind\":\"object\",\"type\":\"SavedPost\",\"relationName\":\"SavedPostToUser\"},{\"name\":\"userProfile\",\"kind\":\"object\",\"type\":\"UserProfile\",\"relationName\":\"UserToUserProfile\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToUser\"},{\"name\":\"sentReviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"SentReviews\"},{\"name\":\"receivedReviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ReceivedReviews\"},{\"name\":\"cards\",\"kind\":\"object\",\"type\":\"PaymentCard\",\"relationName\":\"PaymentCardToUser\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"UserBookings\"},{\"name\":\"adminPermissions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"moderatedReviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ModeratedReviews\"},{\"name\":\"adminActions\",\"kind\":\"object\",\"type\":\"AdminActionLog\",\"relationName\":\"AdminActionLogToUser\"}],\"dbName\":null},\"UserProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserProfile\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Post\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"zipCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bedroom\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"bathroom\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"Type\"},{\"name\":\"property\",\"kind\":\"enum\",\"type\":\"Property\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isPaid\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ownershipType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"titleDeedStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hoaFees\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"propertyTaxes\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"financingOptions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lotSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"zoning\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isAvailable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"availableFrom\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"minStay\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxStay\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxGuests\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isNegotiable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"depositPercentage\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PostOwner\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"postDetail\",\"kind\":\"object\",\"type\":\"PostDetail\",\"relationName\":\"PostToPostDetail\"},{\"name\":\"savedPosts\",\"kind\":\"object\",\"type\":\"SavedPost\",\"relationName\":\"PostToSavedPost\"},{\"name\":\"chats\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToPost\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToPost\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"PostToReview\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"PostBookings\"}],\"dbName\":null},\"PostDetail\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"utilities\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"income\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"school\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"bus\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"restaurant\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wifi\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"airConditioning\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"parking\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"securityPersonnel\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"pet\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"floorNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalFloors\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"yearBuilt\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"furnished\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"airport\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"supermarket\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"shoppingMall\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"nearestClub\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"hospital\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"beach\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"publicTransport\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"restaurants\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"additionalUtilities\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToPostDetail\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"renovationHistory\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"energyEfficiency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"homeWarranty\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"includedAppliances\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hoaAmenities\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"SavedPost\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SavedPostToUser\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToSavedPost\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Chat\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"ChatToPost\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"buyer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BuyerChats\"},{\"name\":\"buyerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"seller\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SellerChats\"},{\"name\":\"sellerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastReadBy\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ChatToMessage\"}],\"dbName\":null},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToMessage\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageToUser\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"seenBy\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"paymentMethod\",\"kind\":\"enum\",\"type\":\"PaymentMethodType\"},{\"name\":\"transactionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"transactionType\",\"kind\":\"enum\",\"type\":\"TransactionType\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PaymentToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PaymentToPost\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"card\",\"kind\":\"object\",\"type\":\"PaymentCard\",\"relationName\":\"PaymentToPaymentCard\"},{\"name\":\"cardId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToPayment\"},{\"name\":\"bookingId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"PaymentToReview\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"PaymentCard\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cardNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiryMonth\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"expiryYear\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"holderName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brand\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isDefault\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastFour\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PaymentCardToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToPaymentCard\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Review\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"comment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ReviewStatus\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"moderationReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reviewer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SentReviews\"},{\"name\":\"reviewerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reviewee\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReceivedReviews\"},{\"name\":\"revieweeId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToReview\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToReview\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToReview\"},{\"name\":\"bookingId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"moderatedBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ModeratedReviews\"},{\"name\":\"moderatedById\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"approvedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Booking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostBookings\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserBookings\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookingStatus\"},{\"name\":\"totalAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"guests\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"specialRequests\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"BookingToPayment\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"review\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"BookingToReview\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancelledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"confirmedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"relatedId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"relatedType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"AdminActionLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AdminActionLogToUser\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"details\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

